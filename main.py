from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import logging
from datetime import datetime
import sqlite3
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = '7648754388:AAHHCNW3hPftmixNpX_08i6mFonrJZ0mBGY'
CHANNELS = {
    'üì¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª': '@quasarwxl',
    'üì∞ –ù–æ–≤–æ—Å—Ç–∏': '@diipwebnews',
    'üîê –ë–∞–∑—ã | –õ–æ–≥–∏': '@QuaSxw',
    'üí¨ –ö—É—Ä–∏–ª–∫–∞ | –û–±—Å—É–∂–¥–µ–Ω–∏—è': '@offtop_kurilka'
}
ADMIN_CHAT_ID = 1078027776  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SENDING_MESSAGE = 0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log',
    filemode='a'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT)''')
    conn.commit()
    conn.close()

init_db()

def log_event(event: str, user_id: int = None, username: str = None):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_info = f"UserID: {user_id} | Username: @{username}" if user_id else "System"
    logger.info(f"[{timestamp}] {user_info} | Event: {event}")

def get_users():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT user_id FROM users")
    users = [row[0] for row in c.fetchall()]
    conn.close()
    return users

def add_user(user_id: int, username: str):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    conn.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def subscription_keyboard():
    buttons = [
        [InlineKeyboardButton(text, url=f"https://t.me/{chat_id.lstrip('@')}")] 
        for text, chat_id in CHANNELS.items()
    ]
    buttons.append([InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data='check_sub')])
    return InlineKeyboardMarkup(buttons)

async def is_admin(user_id: int):
    return user_id == ADMIN_CHAT_ID

async def is_subscribed(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        for chat_id in CHANNELS.values():
            member = await context.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            if member.status in ['left', 'kicked']:
                return False
        return True
    except Exception as e:
        logger.error(f"Subscription check error: {e}")
        return False

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username)
    log_event("Command /start received", user.id, user.username)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
        reply_markup=subscription_keyboard()
    )

async def handle_subscription_check(query, context: ContextTypes.DEFAULT_TYPE):
    user = query.from_user
    if await is_subscribed(user.id, context):
        await query.message.delete()
        await show_main_menu(context, user.id)
    else:
        await query.message.reply_text(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
            reply_markup=subscription_keyboard()
        )

async def show_main_menu(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    keyboard = [
        [InlineKeyboardButton("üìö –°–ª–∏–≤ –∫—É—Ä—Å–æ–≤", url='https://t.me/unhidden62bot')],
        [InlineKeyboardButton("üåë –¢–µ–Ω–µ–≤—ã–µ —Ñ–æ—Ä—É–º—ã", url='https://t.me/shadowchatsforums')],
        [InlineKeyboardButton("üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö", url='http://t.me/verifteam_bot?start=7314735680')],
        [InlineKeyboardButton("üì± –°–¥–∞—Ç—å WhatsApp", callback_data='rent_whatsapp')]
    ]
    await context.bot.send_message(
        chat_id=user_id,
        text="üéâ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'check_sub':
        await handle_subscription_check(query, context)
    elif data == 'rent_whatsapp':
        await show_whatsapp_rent_menu(context, query.from_user.id)
    elif data == 'back_to_main':
        await show_main_menu(context, query.from_user.id)
    elif data.startswith('rent_'):
        await process_rent_selection(query, context)

async def show_whatsapp_rent_menu(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    keyboard = [
        [InlineKeyboardButton("‚è≥ 1 —á–∞—Å - 4$", callback_data='rent_1')],
        [InlineKeyboardButton("‚è≥ 2 —á–∞—Å–∞ - 6$", callback_data='rent_2')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    await context.bot.send_message(
        chat_id=user_id,
        text="üì± –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã WhatsApp:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def process_rent_selection(query, context):
    duration = query.data.split('_')[1]
    prices = {'1': '4$', '2': '6$'}
    
    rent_links = {
        '1': 'https://t.me/QuasWhatsAppOneBot',
        '2': 'https://t.me/WhatsAppQuasbot'
    }
    
    await query.message.edit_text(
        text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞—Ä–µ–Ω–¥—É –Ω–∞ {duration} —á–∞—Å(–∞) –∑–∞ {prices[duration]}\n\n"
             "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–∞—Ç—å':\n\n"
             "üìö –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞–Ω—É–∞–ª–æ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –°–¥–∞—Ç—å", url=rent_links[duration])],
            [InlineKeyboardButton("üìö –ú–∞–Ω—É–∞–ª", url='https://telegra.ph/KAK-SDAT-WHATSAPP-02-10')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='rent_whatsapp')]
        ])
    )

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    await update.message.reply_text("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    return SENDING_MESSAGE

async def send_message_to_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    users = get_users()
    
    success = 0
    errors = 0
    for user_id in users:
        try:
            await message.copy(chat_id=user_id)
            success += 1
        except Exception as e:
            errors += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {str(e)}")
    
    await message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–∫–∏: {errors}")
    return ConversationHandler.END

def main():
    log_event("Bot starting...")
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('br', broadcast)],
            states={
                SENDING_MESSAGE: [MessageHandler(filters.ALL, send_message_to_users)]
            },
            fallbacks=[]
        )
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(conv_handler)
        
        log_event("Bot started successfully")
        application.run_polling()
    except Exception as e:
        logger.critical(f"Bot failed to start: {e}")
        raise

if __name__ == '__main__':
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console.setFormatter(formatter)
    logging.getLogger('').addHandler(console)
    main()